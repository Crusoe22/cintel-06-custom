[{"name": "app.py", "content": "import pandas as pd\nimport yfinance as yf\nfrom faicons import icon_svg\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_ui\nfrom shinywidgets import render_plotly\nimport plotly.express as px\n\nfrom pathlib import Path\nfrom stocks import stocks\n\n# Default to the last 6 months\nend = pd.Timestamp.now()\nstart = end - pd.Timedelta(weeks=26)\n\nui.page_opts(title=\"Stock explorer\", fillable=True)\n\nwith ui.sidebar():\n    ui.input_selectize(\"ticker\", \"Select Stocks\", choices=stocks, selected=\"AAPL\")\n    ui.input_date_range(\"dates\", \"Select dates\", start=start, end=end)\n    ui.input_slider(\"n\", \"Number of bins\", 0, 100, 20)\n\n    ui.h6(\"Github Links:\")\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/Crusoe22/cintel-06-custom\",\n        target=\"_blank\",\n        style=\"color: #007bff;\",\n    )\n    \n    ui.a(\n        \"GitHub App\",\n        href=\"https://github.com/Crusoe22/cintel-06-custom/blob/main/dashboard/app.py\",\n        target=\"_blank\",\n        style=\"color: #007bff;\",\n    )\n\n# Define a function to get data as a pandas DataFrame\ndef get_dataframe():\n    dates = input.dates()\n    return get_ticker().history(start=dates[0], end=dates[1])\n\n# Define a function to get a specific ticker\n@reactive.calc\ndef get_ticker():\n    return yf.Ticker(input.ticker())\n\n# Define a function to calculate the change\n@reactive.calc\ndef get_change():\n    close = get_dataframe()[\"Close\"]\n    return close.iloc[-1] - close.iloc[-2]\n\n# Define a function to calculate the percent change\n@reactive.calc\ndef get_change_percent():\n    close = get_dataframe()[\"Close\"]\n    change = close.iloc[-1] - close.iloc[-2]\n    return change / close.iloc[-2] * 100\n\n# Define a function to get the stock data\n@reactive.calc\ndef get_data():\n    return get_dataframe()\n\nwith ui.layout_column_wrap(fill=False, height=75):\n    with ui.value_box(showcase=icon_svg(\"dollar-sign\")):\n        \"Current Price\"\n\n        @render.ui\n        def price():\n            close = get_dataframe()[\"Close\"]\n            return f\"{close.iloc[-1]:.2f}\"\n\n    with ui.value_box(showcase=output_ui(\"change_icon\")):\n        \"Change\"\n\n        @render.ui\n        def change():\n            return f\"${get_change():.2f}\"\n\n    with ui.value_box(showcase=icon_svg(\"percent\")):\n        \"Percent Change\"\n\n        @render.ui\n        def change_percent():\n            return f\"{get_change_percent():.2f}%\"\n\nwith ui.layout_columns(row_heights=None, col_widths=None):\n    with ui.card(full_screen=True):\n        ui.card_header(\"Price History\")\n\n        @render_plotly\n        def price_history():\n            fig = px.line(\n                get_data(),\n                x=get_data().index,\n                y=\"Close\",\n                title=\"Price History\",\n            )\n            fig.update_layout(\n                hovermode=\"x unified\",\n                paper_bgcolor=\"rgba(0,0,0,0)\",\n                plot_bgcolor=\"rgba(0,0,0,0)\",\n            )\n            return fig\n\n\n    with ui.card():\n        ui.card_header(\"Price Distribution\")\n\n        @render_plotly\n        def price_distribution():\n            return px.histogram(\n                get_data(),\n                x=\"Close\",\n                nbins=input.n(),\n                title=\"Price Distribution\",\n                labels={\"Close\": \"Price\"},\n            )\n\n\nwith ui.layout_columns(height=300, col_widths=12):\n    with ui.card():\n        ui.card_header(\"Stock Data\")\n\n        @render.data_frame\n        def stock_data():\n            data = get_data()  # Get the stock data\n            if data is not None:\n                return render.DataGrid(data)  # Render the DataGrid with the stock data\n\nui.include_css(Path(__file__).parent / \"styles.css\")\n\n@reactive.calc\ndef get_ticker():\n    return yf.Ticker(input.ticker())\n\n\n@reactive.calc\ndef get_data():\n    dates = input.dates()\n    return get_ticker().history(start=dates[0], end=dates[1])\n\n\n@reactive.calc\ndef get_change():\n    close = get_data()[\"Close\"]\n    return close.iloc[-1] - close.iloc[-2]\n\n\n@reactive.calc\ndef get_change_percent():\n    close = get_data()[\"Close\"]\n    change = close.iloc[-1] - close.iloc[-2]\n    return change / close.iloc[-2] * 100\n\n\nwith ui.hold():\n\n    @render.ui\n    def change_icon():\n        change = get_change()\n        icon = icon_svg(\"arrow-up\" if change >= 0 else \"arrow-down\")\n        icon.add_class(f\"text-{('success' if change >= 0 else 'danger')}\")\n        return icon", "type": "text"}, {"name": "stocks.py", "content": "stocks = {\n    \"AAPL\": \"Apple Inc.\",\n    \"MSFT\": \"Microsoft Corporation\",\n    \"AMZN\": \"Amazon.com, Inc.\",\n    \"GOOGL\": \"Alphabet Inc.\",\n    \"META\": \"Meta Platforms\",\n    \"BRK-A\": \"Berkshire Hathaway Inc.\",\n    \"V\": \"Visa Inc.\",\n    \"JNJ\": \"Johnson & Johnson\",\n    \"WMT\": \"Walmart Inc.\",\n    \"JPM\": \"JPMorgan Chase & Co.\",\n    \"MA\": \"Mastercard Incorporated\",\n    \"PG\": \"The Procter & Gamble Company\",\n    \"UNH\": \"UnitedHealth Group Incorporated\",\n    \"DIS\": \"The Walt Disney Company\",\n    \"HD\": \"The Home Depot, Inc.\",\n    \"BAC\": \"Bank of America Corporation\",\n    \"NVDA\": \"NVIDIA Corporation\",\n    \"PYPL\": \"PayPal Holdings, Inc.\",\n    \"CMCSA\": \"Comcast Corporation\",\n    \"NFLX\": \"Netflix, Inc.\",\n    \"ADBE\": \"Adobe Inc.\",\n    \"KO\": \"The Coca-Cola Company\",\n    \"NKE\": \"NIKE, Inc.\",\n    \"MRK\": \"Merck & Co., Inc.\",\n    \"PEP\": \"PepsiCo, Inc.\",\n    \"T\": \"AT&T Inc.\",\n    \"PFE\": \"Pfizer Inc.\",\n    \"INTC\": \"Intel Corporation\",\n    \"CSCO\": \"Cisco Systems, Inc.\",\n    \"CRM\": \"salesforce.com, inc.\",\n    \"XOM\": \"Exxon Mobil Corporation\",\n}", "type": "text"}, {"name": "styles.css", "content": ":root {\n    --bslib-sidebar-main-bg: #f8f8f8;\n  }\n  \n  .plotly .modebar-container {\n    display: none !important;\n  }", "type": "text"}]